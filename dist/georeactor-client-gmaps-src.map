{"version":3,"sources":["src/../scripts/georeactor-client.js","src/../scripts/georeactor-gmaps.js"],"names":[],"mappings":";;;;yCAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["if (typeof console === 'undefined') {\n  console = {\n    log: function() {},\n    error: function() {}\n  }\n}\n\n// Array.forEach and Array.map for TopoJSON to work in old browsers\nif (!Array.prototype.forEach) {\n  Array.prototype.forEach = function(fn,scope){\n    var i, len;\n    for (i = 0, len = this.length; i < len; ++i) {\n      if(i in this){\n        fn.call(scope, this[i], i, this);\n      }\n    }\n  };\n}\nif (!('map' in Array.prototype)) {\n  Array.prototype.map= function(mapper, that /*opt*/) {\n    var other= new Array(this.length);\n    for (var i= 0, n= this.length; i<n; i++)\n      if (i in this)\n        other[i]= mapper.call(that, this[i], i, this);\n    return other;\n  };\n}\n\n(window || global).georeactor = function() {\n  console.error('GEOREACTOR: no maps library was added');\n};\n(window || global).GEOREACTOR = {\n  data: [],\n  options: {},\n  valuesForField: {},\n  _: { }\n};\n\n(function() {\n  var globalBounds;\n\n  function makeRequestFor(datafile, callback) {\n    // XMLHttpRequest without jQuery\n    var df = datafile;\n    var request = new XMLHttpRequest();\n    request.open('GET', datafile, true);\n\n    request.onreadystatechange = function() {\n      if (this.readyState === 4) {\n        if (this.status >= 200 && this.status < 400) {\n          // consume GeoJSON or TopoJSON file\n          var gj = null;\n          var datafile = df.toLowerCase();\n          if (datafile.indexOf('topojson') > -1 || datafile.indexOf('topo.json') > -1) {\n            var tj = JSON.parse(this.responseText);\n            var key = Object.keys(tj.objects)[0];\n            gj = topojson.feature(tj, tj.objects[key]);\n          } else if (datafile.indexOf('geojson') > -1 || datafile.indexOf('geo.json') > -1) {\n            gj = JSON.parse(this.responseText);\n          } else {\n            throw 'data type unknown: ' + datafile;\n          }\n\n          // get info on bounds and properties for each data file\n          gj.features.map(function(feature) {\n            var keys = Object.keys(feature.properties);\n            keys.map(function(key) {\n              var val = feature.properties[key];\n              if (!GEOREACTOR.valuesForField[key]) {\n                GEOREACTOR.valuesForField[key] = {\n                  min: val,\n                  max: val,\n                  nonZeroCount: 0\n                };\n              }\n              if (val < GEOREACTOR.valuesForField[key].min) {\n                GEOREACTOR.valuesForField[key].min = val;\n              }\n              if (val > GEOREACTOR.valuesForField[key].max) {\n                GEOREACTOR.valuesForField[key].max = val;\n              }\n              if (val) {\n                GEOREACTOR.valuesForField[key].nonZeroCount++;\n              }\n            });\n\n            var bounds = makeBounds(feature.geometry.coordinates);\n            feature.properties.bounds = bounds;\n            if (!globalBounds) {\n              globalBounds = bounds;\n            } else {\n              globalBounds[0] = Math.min(globalBounds[0], bounds[0]);\n              globalBounds[1] = Math.min(globalBounds[1], bounds[1]);\n              globalBounds[2] = Math.max(globalBounds[2], bounds[2]);\n              globalBounds[3] = Math.max(globalBounds[3], bounds[3]);\n            }\n          });\n          GEOREACTOR._.fitBounds(globalBounds);\n\n          callback(gj);\n        } else {\n          console.log('failed to do XMLHttpRequest');\n        }\n      }\n    };\n    request.send();\n  }\n\n  function makeBounds(coordinates, existing) {\n    if (!existing) {\n      existing = [180, 90, -180, -90];\n    }\n    if (typeof coordinates[0] === 'number') {\n      existing[0] = Math.min(existing[0], coordinates[0]);\n      existing[1] = Math.min(existing[1], coordinates[1]);\n      existing[2] = Math.max(existing[2], coordinates[0]);\n      existing[3] = Math.max(existing[3], coordinates[1]);\n    } else {\n      for (var c = 0; c < coordinates.length; c++) {\n        existing = makeBounds(coordinates[c], existing);\n      }\n    }\n    return existing;\n  }\n\n  GEOREACTOR.commonDataLoader = function() {\n    if (GEOREACTOR.options.data.length === 0) {\n      console.log('GEOREACTOR: no datasets to load');\n    }\n    GEOREACTOR.options.data.map(function(dataset) {\n      makeRequestFor(dataset, function (gj) {\n        GEOREACTOR._.mapJSONfile(gj);\n      });\n    });\n  };\n})();\n","(function() {\n  var map;\n\n  if (typeof GEOREACTOR === 'undefined') {\n    console.error('GEOREACTOR: georeactor-client.js must be loaded for georeactor-leaflet to work');\n    return;\n  }\n  GEOREACTOR.library = 'gmaps';\n\n  GEOREACTOR._.mapJSONfile = function(gj) {\n    map.data.addGeoJson(gj);\n    map.data.setStyle(function (feature) {\n      return {\n        fillColor: '#f00',\n        fillOpacity: 0,\n        strokeColor: '#444',\n        strokeWeight: 1\n      }\n    });\n    map.data.addListener('click', function(event) {\n      GEOREACTOR._.fitBounds(event.feature.getProperty('bounds'));\n      GEOREACTOR._.detailView.setState({ selectFeature: event.feature });\n      map.data.setStyle(function (feature) {\n        var fillOpacity = 0;\n        if (feature === event.feature) {\n          fillOpacity = 0.2;\n        }\n        return {\n          fillColor: '#f00',\n          fillOpacity: fillOpacity,\n          strokeColor: '#444',\n          strokeWeight: 1\n        }\n      });\n    });\n    return map.data;\n  };\n\n  GEOREACTOR.initMap = function() {\n    map = new google.maps.Map(document.getElementById(GEOREACTOR.options.div || 'map'), {\n      zoom: 5,\n      center: {lat: 0, lng: 0},\n      streetViewControl: false\n    });\n\n    GEOREACTOR._.fitBounds = function(bounds) {\n      map.fitBounds(new google.maps.LatLngBounds(\n        new google.maps.LatLng(bounds[1], bounds[0]),\n        new google.maps.LatLng(bounds[3], bounds[2])\n      ));\n    }\n\n    GEOREACTOR.commonDataLoader();\n\n    if (typeof GEOREACTOR.initReact === 'function') {\n      GEOREACTOR.initReact();\n    }\n  };\n\n  georeactor = function(options) {\n    GEOREACTOR.options = options;\n\n    var sc = document.createElement('script');\n    sc.src = '//maps.googleapis.com/maps/api/js?callback=GEOREACTOR.initMap&key=' + (options.API_KEY || '');\n    document.body.appendChild(sc);\n  };\n})();\n"]}